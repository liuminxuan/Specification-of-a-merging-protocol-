***(
    This code can make merge system satisfy mutex exclusion. 
    Add fair state, 
    In fair state, noThrough-lane vehicle and through-lane vehicle can enter the merge point alternatively.
    )
***

fmod SMODE is 
  sort SMode .
  ops fairT fairN prioritized : -> SMode .
endfm

fmod QUEUE is
  pr NAT .
  sort Queue .
  subsort Nat < Queue .
  op empq : -> Queue [ctor] .
  op _;_ : Queue Queue -> Queue [ctor assoc id: empq] .
  op #(_,_,_) : Queue Nat Nat -> Nat .
  var Q : Queue .
  vars X Y Z : Nat .

  eq #(empq, X, Y) = X .
  eq #(Q, X, 0) = X .
  ceq #((Z ; Q), X, Y) = #(Q, X, sd(Y,1)) if Z >= 100 .
  ceq #((Z ; Q), X, Y) = #(Q, s(X), sd(Y,1)) if Z < 100 .
endfm

fmod SOUP{D :: TRIV} is
  sort Soup{D} .
  subsort D$Elt < Soup{D} .
  op empty : -> Soup{D} [ctor] .
  op __ : Soup{D} Soup{D} -> Soup{D} [ctor assoc comm id: empty] .
  op _\in_ : D$Elt Soup{D} -> Bool .
  var E : D$Elt .
  var S : Soup{D} .
  eq E \in empty = false .
  eq E \in E S = true .
  eq E \in S = false [owise] .
endfm

fmod GSTATUS is
  sort GStat .
  ops nFin fin : -> GStat [ctor] .
endfm

fmod LANE is
  sort Lane .
  op !_ : Lane -> Lane .
  ops through noThrough : -> Lane .
  eq !(through) = through .
  eq !(noThrough) = through .
endfm

fmod VSTATUS is
  pr LANE .
  sorts VStat .
  ops empty running approaching unspace space yield stopped crossing crossed : -> VStat [ctor] .
endfm

fmod OCOMP is
  pr GSTATUS .
  pr VSTATUS .
  pr NAT .
  pr QUEUE .
  pr SMODE .
  sort OComp .
  op (gstat:_) : GStat -> OComp [ctor] .
  op (v[_]:_,_) : Nat Lane VStat -> OComp [ctor] .
  op (lane[_]:_) : Lane Queue -> OComp [ctor] .

  op (vehicleCrossing:_) : Bool -> OComp [ctor] . --- is there a vehicle crossing the merge point or not
  op (mode:_) : SMode -> OComp [ctor] . --- system mode: {fullP, semiP, fairT, fairN}
  --- op (veInNTLane:_) : Bool -> OComp [ctor] . --- is there a vehicle on the non-through lane or not
  --- op (numVeInTLane:_) : Nat -> OComp [ctor] . --- total number of vehicles approaching the through lane
endfm

view OComp from TRIV to OCOMP is
  sort Elt to OComp .
endv

fmod OCOMP-SOUP is
  pr SOUP{OComp} .
  op fin? : Soup{OComp} -> Bool .
  op letCross : Nat Soup{OComp} -> Soup{OComp} .
  var GS : GStat .
  var L : Lane .
  var N : Nat .
  var VI : Nat .
  var B1 B2 B3 B4 B5 : Bool .
  var Q : Queue .
  var OCs : Soup{OComp} .
  var M : SMode .
  eq fin?(empty) = true .
  eq fin?((gstat: GS) OCs) = fin?(OCs) .
  eq fin?((vehicleCrossing: B1) OCs) = fin?(OCs) .
  eq fin?((mode: M) OCs) = fin?(OCs) .
  --- eq fin?((veInNTLane: B1) OCs) = fin?(OCs) .
  --- eq fin?((numVeInTLane: N) OCs) = fin?(OCs) .
  eq fin?((lane[L]: Q) OCs) = fin?(OCs) .
  eq fin?((v[VI]: L,crossed) OCs) = fin?(OCs) .
  --- eq fin?((v[VI]: L,space) OCs) = fin?(OCs) .
  eq fin?((v[VI]: L,yield) OCs) = fin?(OCs) .
  eq fin?(OCs) = false [owise] .
endfm

fmod CONFIG is
  pr OCOMP-SOUP .
  sorts Config .
  op {_} : Soup{OComp} -> Config [ctor] .
  ops init init2 : -> Config .
  eq init = {(gstat: nFin) (lane[through]: empq) (lane[noThrough]: empq) 
              (v[101]: through,unspace) (v[102]: through,unspace)
              (v[4]: through,running) (v[5]: through,running) (v[6]: through,running) (v[7]: through,running)
              (v[1]: noThrough,running) (v[2]: noThrough,running) (v[3]: noThrough,running) 
              (vehicleCrossing: false) (mode: prioritized)
              } .
endfm

mod MERGING is
  inc CONFIG .
  vars L LN LT : Lane .
  vars VI VI' VI'' VI''' NT : Nat .
  vars VS VS' : Queue .
  vars OCs OCs' : Soup{OComp} .
  vars B1 B2 B3 B4 B5 : Bool .
  vars M M2 : SMode .
  vars VeSt : VStat .

  rl [loop] : {(gstat: fin) OCs} => {(gstat: fin) OCs} .  
  crl [fin] : {(gstat: nFin) OCs} => {(gstat: fin) OCs} if fin?(OCs) .

  --- approaching
  crl [approach_T] : 
    {(mode: M) (lane[L]: VS) (v[VI]: L,running) OCs} 
  => { (mode: (if (#(VS,0,5) >= 3 and M == prioritized) then fairT else M fi))
       (lane[L]: (VS ; VI)) (v[VI]: L,approaching) OCs} 
  if L == through .

  crl [approach_N] : 
    {(lane[L]: VS) (v[VI]: L,running) OCs} 
  => {(lane[L]: (VS ; VI)) (v[VI]: L,approaching) OCs} 
  if L == noThrough .

  --- add space to through lane
  crl [approach_space] : 
    {(lane[L]: VS) (v[VI]: L,unspace) OCs} 
  => {(lane[L]: (VS ; VI)) (v[VI]: L,space) OCs} 
  if L == through .
***(
    SPACE
)***
  crl [N_space] : 
    {(vehicleCrossing: false) (mode: M)
      (lane[through]: (VI ; VS)) (v[VI]: through,space) 
      (lane[noThrough]: (VI' ; VS')) (v[VI']: noThrough,VeSt) OCs} 
  => {(vehicleCrossing: true) (mode: (if (#(VS,0,5) >= 3 and M == prioritized) then fairT else M fi))
      (lane[through]: VS) (v[VI]: through,yield)
      (lane[noThrough]: (VI' ; VS')) (v[VI']: noThrough,crossing) OCs}
  if (VeSt == approaching or VeSt == stopped) .

  rl [del_space] : 
    {(mode: M) (lane[through]: (VI ; VS)) (v[VI]: through,space) OCs} 
  => { (mode: (if (#(VS,0,5) >= 3 and M == prioritized) then fairT else M fi))
      (lane[through]: VS) (v[VI]: through,yield) OCs} .

  --- checked

  crl [prioritized_T_crossing] : 
    {(vehicleCrossing: false) (mode: M) (lane[through]: (VI ; VS)) (v[VI]: through,VeSt) OCs} 
  => {(vehicleCrossing: true) (mode: M) (lane[through]: (VI ; VS)) (v[VI]: through,crossing) OCs} 
  if (M =/= fairN) /\ (VeSt == approaching or VeSt == stopped) .

  crl [fair_N_crossing] : 
    {(vehicleCrossing: false) (mode: fairN) (lane[L]: (VI ; VS)) (v[VI]: L,VeSt) OCs} 
  => {(vehicleCrossing: true) (mode: fairN) (lane[L]: (VI ; VS)) (v[VI]: L,crossing) OCs} 
  if L == noThrough /\ (VeSt == approaching or VeSt == stopped) .

  crl [prioritized_N_crossing] : 
    {(vehicleCrossing: false) (mode: prioritized) (lane[through]: empq) (lane[L]: (VI ; VS)) (v[VI]: L,VeSt) OCs} 
  => {(vehicleCrossing: true) (mode: prioritized) (lane[through]: empq) (lane[L]: (VI ; VS)) (v[VI]: L,crossing) OCs}
  if L == noThrough /\ (VeSt == approaching or VeSt == stopped) .

  rl [stopped] : 
    {(vehicleCrossing: true) (lane[L]: (VI ; VS)) (v[VI]: L,approaching) OCs} 
  => {(vehicleCrossing: true) (lane[L]: (VI ; VS)) (v[VI]: L,stopped) OCs} .

  crl [fair_T_stopped] : 
    {(mode: fairN) (lane[through]: (VI ; VS)) (v[VI]: through,approaching) 
    (lane[noThrough]: (VI' ; VS')) (v[VI']: noThrough,VeSt) OCs} 
  => {(mode: fairN) (lane[through]: (VI ; VS)) (v[VI]: through,stopped)
    (lane[noThrough]: (VI' ; VS')) (v[VI']: noThrough,VeSt) OCs} 
  if (VeSt == approaching or VeSt == stopped) .

  crl [fair_N_stopped] : 
    {(mode: M) (lane[through]: (VI ; VS)) (v[VI]: through,VeSt) 
    (lane[noThrough]: (VI' ; VS')) (v[VI']: noThrough, approaching) OCs} 
  => {(mode: M) (lane[through]: (VI ; VS)) (v[VI]: through,VeSt)
    (lane[noThrough]: (VI' ; VS')) (v[VI']: noThrough,stopped) OCs} 
  if (M =/= fairN) /\ (VeSt == approaching or VeSt == stopped) .

  rl [prioritized_crossed] : 
    {(vehicleCrossing: true) (mode: prioritized) 
    (lane[L]: (VI ; VS)) (v[VI]: L,crossing) OCs} 
  => {(vehicleCrossing: false) (mode: prioritized) 
    (lane[L]: VS) (v[VI]: L,crossed) OCs} .

  crl [N_crossed] : 
    {(vehicleCrossing: true) (mode: M) 
    (lane[L]: (VI ; VS)) (v[VI]: L,crossing) 
    OCs} 
  => {(vehicleCrossing: false) (mode: fairT) 
    (lane[L]: VS) (v[VI]: L,crossed)
     OCs} 
  if (L == noThrough) /\ (M =/= prioritized) .

  crl [fair_T_crossed1] : 
    {(vehicleCrossing: true) (mode: fairT) 
    (lane[through]: (VI ; VS)) (v[VI]: through,crossing) 
    (lane[noThrough]: (VI' ; VS')) (v[VI']: noThrough,VeSt) OCs} 
  => {(vehicleCrossing: false) (mode: (if (#(VS,0,5) >= 3) then fairN else prioritized fi))
    (lane[through]: VS) (v[VI]: through,crossed)
    (lane[noThrough]: (VI' ; VS')) (v[VI']: noThrough,VeSt) OCs} 
  if (VeSt == approaching or VeSt == stopped) .

  rl [fair_T_crossed2] : 
    {(vehicleCrossing: true) (mode: M)
    (lane[through]: (VI ; VS)) (v[VI]: through,crossing) 
    (lane[noThrough]: empq) OCs} 
  => {(vehicleCrossing: false) 
    (mode: (if (#(VS,0,5) >= 3) then fairT else prioritized fi))
    (lane[through]: VS) (v[VI]: through,crossed) 
    (lane[noThrough]: empq) OCs} .

endm

--- no deadlock
search [1] in MERGING : init =>! {OCs} .

--- mutual exclusion
search [1] in MERGING : init =>* {(v[VI]: L, crossing) (v[VI']: LN, crossing) OCs} such that VI =/= VI' .


in model-checker .

mod MERGING-PREDS is
  pr MERGING .
  inc SATISFACTION .
  subsort Config < State .
  ops Fin : -> Prop .
  var OCs : Soup{OComp} .
  var PROP : Prop .
  vars VI : Nat .
  vars L : Lane .
  eq {(gstat: fin) OCs} |= Fin = true .
  eq {OCs} |= PROP = false [owise] .

  op want : Nat -> Prop .
  op passed : Nat -> Prop .
  eq {(v[VI]: L,approaching) OCs} |= want(VI) = true .
  eq {(v[VI]: L,crossed) OCs} |= passed(VI) = true .

endm

mod MERGING-CHECK is
  inc MERGING-PREDS .
  inc MODEL-CHECKER .
  inc LTL-SIMPLIFIER .
  op halt  : -> Formula .
  eq halt = <> Fin .

  op lofree0 : Nat -> Formula .
  op lofree : -> Formula .
  vars VI : Nat .
  eq lofree0(VI) = (want(VI) |-> passed(VI)) .
  eq lofree = lofree0(1) /\ lofree0(2) /\ lofree0(3) /\
              lofree0(4) /\ lofree0(5) /\ lofree0(6) /\ lofree0(7) .
endm

red in MERGING-CHECK : modelCheck(init,lofree) .
